name: Release Test
on:
  push:
    branches:
      - main
permissions:
  contents: write
jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install jq

      - name: Setup node version
        uses: actions/setup-node@v4
        with:
          node-version: "*"
          registry-url: "https://registry.npmjs.org"

      - name: Read release props
        id: read-release-props
        # run: bash .github/scripts/release.sh 2>&1 | tee -a get-release-props-logs.log
        run: |
          # Declerations
          RELEASE_CONFIG_FILE=null
          RELEASE_TYPE=null
          TAG=null

          PACKAGEJSON=$(cat package.json)
          PACKAGE_NAME="$(echo $PACKAGEJSON | jq -r '.name')"
          PACKAGE_VERSION="$(echo $PACKAGEJSON | jq -r '.version')"
          PACKAGE_NPM_VERSION=null
          FINAL_RELEASE_VERSION=null

          # Check if release config file is available
          echo "- reading config.json file"
          if [ -f ".release/config.json" ]; then
              echo "- '.release/config.json' file found"
              RELEASE_CONFIG_FILE=$(cat .release/config.json)
          else
              echo "- '.release/config.json' file not found"
              echo "- abort"
              exit 1
          fi

          # Check if release config file has `releaseType`
          echo "- reading 'releaseType'"
          if [ "$(echo "$RELEASE_CONFIG_FILE" | jq -r ".releaseType")" != "null" ]; then
              RELEASE_TYPE=$(echo "$RELEASE_CONFIG_FILE" | jq -r ".releaseType")
              echo "- 'releaseType': $RELEASE_TYPE"
          else
              RELEASE_TYPE=null
              echo "- no 'releaseType' provided"
              echo "- abort"
              exit 1
          fi

          # Check if npm view command succeeded or failed
          echo "- reading package version from npm"
          PACKAGE_NPM_VERSION=$(npm view $PACKAGE_NAME version 2>/dev/null)
          if [ $? -eq 0 ]; then
              echo "- package npm version: $PACKAGE_NPM_VERSION"
              # if [ "$PACKAGE_VERSION" == "$PACKAGE_NPM_VERSION" ]; then
              #     echo "NPM version and package version matched."
              # fi
          else
              echo "- no npm version of the package found"
              # FIRST_RELEASE=true
              PACKAGE_NPM_VERSION=null
              FINAL_RELEASE_VERSION=$PACKAGE_VERSION
          fi

          # Function to update version based on RELEASE_TYPE
          update_version() {
              local current_version=$1
              local release_type=$2
              local major
              local minor
              local patch

              IFS='.' read -r major minor patch <<<"$current_version"

              case $release_type in
              "major")
                  echo "$(($major + 1)).0.0"
                  ;;
              "minor")
                  echo "$major.$(($minor + 1)).0"
                  ;;
              "patch")
                  echo "$major.$minor.$(($patch + 1))"
                  ;;
              *)
                  echo "- invalid release type: $release_type"
                  ;;
              esac
          }

          #  Logic for FINAL_RELEASE_VERSION
          if [ "$PACKAGE_NPM_VERSION" == "null" ]; then
              FINAL_RELEASE_VERSION=$PACKAGE_VERSION
          else
              case $RELEASE_TYPE in
              "major" | "minor" | "patch")
                  echo "- analysing version"
                  FINAL_RELEASE_VERSION=$(update_version "$PACKAGE_NPM_VERSION" "$RELEASE_TYPE") TAG=$FINAL_RELEASE_VERSION
                  echo "- analysed deployable version $FINAL_RELEASE_VERSION"
                  ;;
              *)
                  echo "- invalid release type: $RELEASE_TYPE"
                  ;;
              esac
          fi

          # Logic for TAG
          echo "- reading custom tag"
          if [ "$(echo "$RELEASE_CONFIG_FILE" | jq -r ".tag")" != "null" ]; then
              TAG=$(echo "$RELEASE_CONFIG_FILE" | jq -r ".tag")
              echo "- custom tag detected $TAG"
          else
              echo "- no custom tag found"
              TAG="v-$FINAL_RELEASE_VERSION"
          fi

          # Check if release notes are available
          echo "- reading release notes"
          RELEASE_NOTES=$(cat .release/release-notes.md)
          if [ $? != 0 ]; then
              echo "- release notes not provided"
              RELEASE_NOTES=null
              # exit 1
          fi

          echo "-----------------------------"
          echo "- RELEASE_NOTES: $RELEASE_NOTES"
          echo "- PACKAGE_NAME: $PACKAGE_NAME"
          echo "- PACKAGE_VERSION: $PACKAGE_VERSION"
          echo "- FINAL_RELEASE_VERSION: $FINAL_RELEASE_VERSION"
          echo "- RELEASE_TYPE:$RELEASE_TYPE"
          echo "- TAG:$TAG"

          # Set output
          echo "tag=$(echo $TAG)" >>$GITHUB_OUTPUT
          echo "release-notes=$(echo $RELEASE_NOTES)" >>$GITHUB_OUTPUT
          echo "final-release-version=$(echo $FINAL_RELEASE_VERSION)" >>$GITHUB_OUTPUT
          echo "release-type=$(echo $RELEASE_TYPE)" >>$GITHUB_OUTPUT
          echo "package-version=$(echo $PACKAGE_VERSION)" >>$GITHUB_OUTPUT

      - name: Upload log file
        uses: actions/upload-artifact@v4
        with:
          name: get-release-props-logs
          path: get-release-props-logs.log

      - name: Install yarn
        run: npm install --global yarn

      - name: Debug variables
        run: |
          echo "tag=${{steps.read-release-props.outputs.tag}}"
          echo "release-notes=${{steps.read-release-props.outputs.release-notes}}"
          echo "package-version: ${{steps.read-release-props.outputs.package-version}}"
          echo "release-type: ${{steps.read-release-props.outputs.release-type}}"
          echo "final-release-version: ${{steps.read-release-props.outputs.final-release-version}}"
          echo "final-release-version: ${{steps.read-release-props.outputs.final-release-version}}"

      - name: Bump version & push
        # if: steps.read-release-props.outcome.package-version != steps.read-release-props.outputs.final-release-version
        continue-on-error: true
        run: |
          USER_NAME='laxmanpokhel_actions'
          USER_EMAIL='laxmanpokhrel@users.noreply.github.com'

          # Set the git configs
          git config --global user.name $USER_NAME
          git config --global user.email $USER_EMAIL

          # Update the version in package.json, and commit & tag the change:
          npm version ${{steps.read-release-props.outputs.final-release-version}} -m "chore(Github Actions-$(date -u +"%Y-%m-%d %H:%M:%S")): Deploy package to NPM"
          git push && git push --tags

      - name: Install package
        run: yarn install

      - name: Build package
        run: yarn build

      - name: Publish package
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          npm publish --tag ${{steps.read-release-props.outputs.tag}}

      - name: Create release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          tag="v-${{ steps.read-release-props.outputs.tag }}"
          # Remove the leading 'v' from the tag
          title="${tag}"
          gh release create "$tag" \
            --repo="$GITHUB_REPOSITORY" \
            --title="$title" \
            --notes="${{ steps.read-release-props.outputs.release-notes }}"
